import java.util.Arrays;
import java.util.Scanner;

public class Main
{

    static Scanner myReader = new Scanner(System.in);
    static String userInput;
    static Row rowOne = new Row();
    static Row rowTwo = new Row();
    static Row rowThree = new Row();

    public static void main(String[] args) throws DumbassException
    {

        playGame();

    }


    public static void playGame() throws DumbassException
    {
        if (rowOne.isAllUnplaceable() && rowTwo.isAllUnplaceable() && rowThree.isAllUnplaceable())
        {

            endGame();

        }
        else
        {

            printBoard();

            System.out.println("\nPlayer 1's turn.");
            place('X');

            if (!hasWon('X') && !(rowOne.isAllUnplaceable() && rowTwo.isAllUnplaceable() && rowThree.isAllUnplaceable())) {

                printBoard();
                System.out.println("\nPlayer 2's turn.");
                place('O');

                if (!hasWon('O'))
                {

                    playGame();

                }
                else
                {

                    endGame();

                }
            }
            else
            {

                endGame();

            }



        }

    }


    public static void place(char character) throws DumbassException
    {

        System.out.println("Select a row: 1, 2 or 3.");
        int row = thisIsWhatHappensWhenYouDontListenToDirections(myReader.nextLine().toLowerCase());

        System.out.println("Select a column: 1, 2 or 3.");
        int column = thisIsWhatHappensWhenYouDontListenToDirections(myReader.nextLine().toLowerCase());


        switch (row)
        {

            case 1:
                if (rowOne.isPlaceable(column - 1))
                {

                    rowOne.setRow(column - 1, character);

                }
                else
                {

                    System.out.println("There is already a piece at this position. Please try again.");
                    place(character);

                }
                break;

            case 2:
                if (rowTwo.isPlaceable(column - 1))
                {

                    rowTwo.setRow(column - 1, character);

                }
                else
                {

                    System.out.println("There is already a piece at this position. Please try again.");
                    place(character);

                }
                break;

            case 3:
                if (rowThree.isPlaceable(column - 1))
                {

                    rowThree.setRow(column - 1, character);

                }
                else
                {

                    System.out.println("There is already a piece at this position. Please try again.");
                    place(character);

                }
                break;

        }

    }


    public static boolean hasWon(char character)
    {

        if (rowOne.checkWin(character) || rowTwo.checkWin(character) || rowThree.checkWin(character))
        {

            return true;

        }
        else if (rowOne.getRow()[0] == character && rowTwo.getRow()[1] == character && rowThree.getRow()[2] == character)
        {

            return true;

        }
        else if (rowOne.getRow()[2] == character && rowTwo.getRow()[1] == character && rowThree.getRow()[0] == character)
        {

            return true;

        }
        else if (rowOne.getRow()[0] == character && rowTwo.getRow()[0] == character && rowThree.getRow()[0] == character)
        {

            return true;

        }
        else if (rowOne.getRow()[1] == character && rowTwo.getRow()[1] == character && rowThree.getRow()[1] == character)
        {

            return true;

        }
        else return rowOne.getRow()[2] == character && rowTwo.getRow()[2] == character && rowThree.getRow()[2] == character;

    }


    public static int thisIsWhatHappensWhenYouDontListenToDirections(String input) throws DumbassException {

        int funni;

        try {

            funni = Integer.parseInt(input);

            if (!(funni >= 1 && funni <= 3)) {

                System.out.println("Fuck you. PICK ONE, TWO, OR THREE");
                funni = thisIsWhatHappensWhenYouDontListenToDirections(myReader.nextLine().toLowerCase());

            }

            return funni;

        } catch (NumberFormatException e) {

            if (input.equals("one") || input.equals("two") || input.equals("three")) {

                System.out.println("Whoah guys, we got smartie here. Tell you what.");
                throw new DumbassException("I fucked your mom.");

            }

            System.out.println("Not an integer. Please make a new input.");
            funni = thisIsWhatHappensWhenYouDontListenToDirections(myReader.nextLine().toLowerCase());
            return funni;

        }

    }


    public static void printBoard()
    {

        System.out.println("   1  2  3");
        System.out.println("1 " + Arrays.toString(rowOne.getRow()));
        System.out.println("2 " + Arrays.toString(rowTwo.getRow()));
        System.out.println("3 " + Arrays.toString(rowThree.getRow()));

    }


    public static void endGame()
    {

        printBoard();

        if (hasWon('X'))
        {

            System.out.println("Player 1 has won!");

        }
        else if (hasWon('O'))
        {

            System.out.println("Player 2 has won!");

        }
        else
        {

            System.out.println("Tie!");

        }

    }

}
